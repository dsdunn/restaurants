{"version":3,"sources":["states.js","components/FilterForm.js","components/RestaurantsTable.js","fetch.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["statesSet","useStyles","makeStyles","form","display","justifyContent","alignItems","flexWrap","padding","margin","select","minWidth","input","FilterForm","criteria","setCriteria","genres","classes","useState","terms","setTerms","handleChange","event","preventDefault","target","name","value","updateCriteria","Paper","data-testid","className","onSubmit","TextField","id","inputProps","variant","label","placeholder","onChange","FormControl","InputLabel","shrink","Select","state","labelId","displayEmpty","MenuItem","key","map","genre","Button","type","RestaurantsTable","filteredRestaurants","page","setPage","useEffect","numJoints","length","oddNum","numPages","Math","floor","rows","joint","index","TableRow","TableCell","city","telephone","Pagination","count","TableContainer","component","Table","TableHead","TableBody","slice","colSpan","fetchData","endpoint","a","fetch","headers","response","json","getRestaurantsAndGenres","restaurants","genreReducer","genreList","forEach","includes","push","split","sort","join","jointA","jointB","formattedRestaurants","matchesCriteria","qualifies","keys","Object","i","criterion","checkNameCityGenre","term","toLowerCase","App","allRestaurants","setAllRestaurants","setFilteredRestaurants","setGenres","init","filtered","values","find","filter","Box","Container","Typography","align","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5bf20efd.chunk.js","sourcesContent":["export const statesSet = \n[['Alabama', 'AL'],\n  ['Alaska', 'AK'],\n  ['Arizona', 'AZ'],\n  ['Arkansas', 'AR'],\n  ['California', 'CA'],\n  ['Colorado', 'CO'],\n  ['Connecticut', 'CT'],\n  ['Delaware', 'DE'],\n  ['Florida', 'FL'],\n  ['Georgia', 'GA'],\n  ['Hawaii', 'HI'],\n  ['Idaho', 'ID'],\n  ['Illinois', 'IL'],\n  ['Indiana', 'IN'],\n  ['Iowa', 'IA'],\n  ['Kansas', 'KS'],\n  ['Kentucky', 'KY'],\n  ['Louisiana', 'LA'],\n  ['Maine', 'ME'],\n  ['Maryland', 'MD'],\n  ['Massachusetts', 'MA'],\n  ['Michigan', 'MI'],\n  ['Minnesota', 'MN'],\n  ['Mississippi', 'MS'],\n  ['Missouri', 'MO'],\n  ['Montana', 'MT'],\n  ['Nebraska', 'NE'],\n  ['Nevada', 'NV'],\n  ['New Hampshire', 'NH'],\n  ['New Jersey', 'NJ'],\n  ['New Mexico', 'NM'],\n  ['New York', 'NY'],\n  ['North Carolina', 'NC'],\n  ['North Dakota', 'ND'],\n  ['Ohio', 'OH'],\n  ['Oklahoma', 'OK'],\n  ['Oregon', 'OR'],\n  ['Pennsylvania', 'PA'],\n  ['Rhode Island', 'RI'],\n  ['South Carolina', 'SC'],\n  ['South Dakota', 'SD'],\n  ['Tennessee', 'TN'],\n  ['Texas', 'TX'],\n  ['Utah', 'UT'],\n  ['Vermont', 'VT'],\n  ['Virginia', 'VA'],\n  ['Washington', 'WA'],\n  ['West Virginia', 'WV'],\n  ['Wisconsin', 'WI'],\n  ['Wyoming', 'WY']];","import React, { useState } from 'react';\nimport { Paper, TextField, Select, InputLabel, FormControl, Button, MenuItem, makeStyles } from '@material-ui/core';\n\nimport { statesSet } from '../states';\n\nconst useStyles = makeStyles({\n  form: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    padding: '1em',\n    margin: '2em auto',\n  },\n  select: {\n    minWidth: 120,\n    margin: '1em 2em'\n  },\n  input: {\n    margin: '0.5em 2em'\n  }\n})\n\n\nexport const FilterForm = ({ criteria, setCriteria, genres }) => {\n\n  const classes = useStyles();\n  const [ terms, setTerms ] = useState('')\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    let { name, value } = event.target;\n\n    if (name === \"terms\") {\n      setTerms(value)\n      if (!value) updateCriteria({name: 'terms', value});\n      return;\n    };\n\n    updateCriteria({name, value});\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    updateCriteria({name: 'terms', value: terms});\n  }\n\n  const updateCriteria = ({ name, value }) => {\n    setCriteria({\n      ...criteria,\n      [name]: value\n    })\n  }\n\n  return (\n    <Paper>\n      <form data-testid=\"filter-form\" className={classes.form} onSubmit={handleSubmit} >\n        <TextField id=\"terms-input\" inputProps={{\"data-testid\": \"terms-input\"}} variant=\"outlined\" label=\"search\" name=\"terms\" placeholder=\"name/city/genre\" className={classes.input} onChange={handleChange}/>\n        <div>\n          <FormControl className={classes.select} >\n            <InputLabel shrink id=\"state-input-label\">State</InputLabel>\n            <Select id=\"state-input\" inputProps={{\"data-testid\": \"state-input\"}} name=\"state\" value={criteria.state || \"\"} labelId=\"state-input-label\" displayEmpty onChange={handleChange}>\n              <MenuItem key=\"all\" value=\"\" >All</MenuItem>\n              { statesSet.map(state => {\n                return (\n                  <MenuItem value={state[1]} key={`state-select-${state[0]}`}>{state[0]}</MenuItem>\n                  )\n                })\n              }\n            </Select>\n          </FormControl>\n          <FormControl className={classes.select}>\n            <InputLabel shrink id=\"genre-input-label\">Genre</InputLabel>\n            <Select id=\"genre\" inputProps={{\"data-testid\": \"genre-input\"}} name=\"genre\" value={criteria.genre || \"\"} id=\"genre-input\" labelId=\"genre-input-label\" displayEmpty onChange={handleChange}>\n              <MenuItem key=\"all\" value=\"\">All</MenuItem>\n              { genres.map(genre => {\n                return (\n                  <MenuItem value={genre} key={`genre-select-${genre}`}>{genre}</MenuItem>\n                  )\n                })\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <Button data-testid=\"filter-form-submit-button\" variant=\"contained\" type=\"submit\" className={classes.input}>Search</Button>\n      </form>\n    </Paper>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { Table, TableContainer, TableHead, TableBody, TableRow, TableCell, Paper } from '@material-ui/core';\nimport { Pagination } from '@material-ui/lab';\n\nexport const RestaurantsTable = ({ filteredRestaurants = [] }) => {\n  const [ page, setPage ] = useState(1);\n\n  useEffect(() => {\n    setPage(1);\n  },[filteredRestaurants])\n\n\n  let numJoints = filteredRestaurants.length;\n  let oddNum = numJoints % 10 !== 0;\n  let numPages = Math.floor(numJoints / 10);\n\n  numPages = oddNum ? numPages + 1 : numPages;\n\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n\n  const rows = filteredRestaurants.map((joint, index) => {\n    return  (\n      <TableRow key={index}>\n        <TableCell>{joint.name}</TableCell>\n        <TableCell>{`${joint.city}, ${joint.state}`}</TableCell>\n        <TableCell>{joint.telephone}</TableCell>\n        <TableCell>{joint.genre}</TableCell>\n      </TableRow>\n      )\n  })\n\n  return (\n    <div data-testid=\"restaurants-table\">\n      <div className=\"pagination\">\n        { numPages > 1 && \n          <Pagination data-testid=\"pagination\" count={numPages} page={page} onChange={handleChange}/>\n        }\n      </div>\n      <TableContainer component={Paper} >\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>Location</TableCell>\n              <TableCell>Phone</TableCell>\n              <TableCell>Genres</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            { rows.length ? rows.slice((page - 1) * 10, page * 10)\n              : <TableRow>\n                  <TableCell colSpan=\"4\">Sorry, no restaurants match your search criteria</TableCell>\n                </TableRow>\n            }\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n    )\n}","let key = 'q3MNxtfep8Gt';\n\nconst fetchData = async (endpoint, method = 'GET') => {\n  let response = await fetch(`https://code-challenge.spectrumtoolbox.com/api/${endpoint}`, {\n    headers: {\n      'Authorization': `Api-Key ${key}`\n    }\n  });\n  return await response.json();\n}\n\nexport const getRestaurants = () => {\n  return fetchData('restaurants');\n};","export const filter = (restaurants, criteria = {}) => {\n  if ( Object.values(criteria).find(criterion => criterion)) {\n    restaurants = restaurants.filter(joint => {\n      return matchesCriteria(joint, criteria);\n    })\n  }\n\n  return restaurants;\n};\n\nexport const getRestaurantsAndGenres = (restaurants = []) => {\n  let genres = [];\n  let genreReducer = (genreList) => {\n    genreList.forEach(genre => {\n      if (!genres.includes(genre)){\n        genres.push(genre);\n      }\n    })\n  }\n\n  restaurants.forEach(joint => {\n    let { genre } = joint;\n\n    if (genre) {\n      let genreList = genre.split(',');\n\n      genreReducer(genreList);\n\n      joint.genre = genreList.sort().join(', ');\n    }\n  })\n\n  restaurants.sort((jointA, jointB) => {\n    return jointA.name > jointB.name ? 1 : -1;\n  });\n  \n  return ({\n    formattedRestaurants: restaurants,\n    genres: genres.sort()\n  });\n}\n\nconst matchesCriteria = (joint, criteria) => {\n  let qualifies = true;\n  let keys = Object.keys(criteria);\n\n  for (let i = 0; i < keys.length; i++) {\n    let criterion = keys[i];\n    let value = criteria[criterion];\n\n    if (!criteria[criterion]) continue;\n\n    if (criterion === 'terms' && checkNameCityGenre(joint, criteria[criterion])) {\n      continue;\n    } else if (criterion !== 'terms' && joint[criterion].includes(value)) {\n      continue;\n    } else { \n      qualifies = false;\n    }\n  }\n  return qualifies;\n}\n\nconst checkNameCityGenre =  (joint, term) => {\n  term = term.toLowerCase();\n\n  return joint.name.toLowerCase().includes(term) || joint.city.toLowerCase().includes(term) || joint.genre.includes(term);\n}\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Box, Container, Typography } from '@material-ui/core';\n\nimport { FilterForm } from './components/FilterForm';\nimport { RestaurantsTable } from './components/RestaurantsTable';\n\nimport { getRestaurants } from './fetch';\nimport { filter, getRestaurantsAndGenres } from './utils';\n\nfunction App() {\n  const [ allRestaurants, setAllRestaurants ] = useState([]);\n  const [ filteredRestaurants, setFilteredRestaurants ] = useState([]);\n  const [ genres, setGenres ] = useState([]);\n  const [ criteria, setCriteria ] = useState({\n    terms: '',\n    state: '',\n    genre: ''\n  });\n\n  useEffect(() => {\n    const init = async() => {\n      let restaurants = await getRestaurants();\n      let { formattedRestaurants, genres } = getRestaurantsAndGenres(restaurants);\n\n      setAllRestaurants(formattedRestaurants);\n      setFilteredRestaurants(formattedRestaurants);\n      setGenres(genres);\n    }\n\n    init();\n  }, [])\n\n  useEffect(() => {\n    let filtered = filter(allRestaurants, criteria)\n\n    setFilteredRestaurants(filtered);\n  }, [criteria])\n\n  return (\n    <Box>\n      <Container className=\"App\">\n        <Typography variant=\"h1\" align=\"center\" gutterBottom >Restaurants</Typography>\n        <FilterForm criteria={criteria} setCriteria={setCriteria} genres={genres}/>\n        <RestaurantsTable filteredRestaurants={filteredRestaurants} />\n      </Container>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}